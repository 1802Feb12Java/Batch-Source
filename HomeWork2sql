-----2.1-----
SELECT * FROM EMPLOYEE; 
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

-----2.2-----
SELECT * FROM ALBUM ORDER BY TITLE DESC; 
SELECT FIRSTNAME--,CITY 
FROM CUSTOMER ORDER BY CITY ASC;

-----2.3-----
INSERT INTO GENRE VALUES (26, 'PUNK ROCK'); 
INSERT INTO GENRE VALUES (27, 'COVERS');

INSERT INTO EMPLOYEE VALUES (9, 'JOHN', 'BRAND', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO EMPLOYEE VALUES (19, 'JOHNY', 'BRANDT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

INSERT INTO CUSTOMER VALUES (60, 'JOHNY', 'BRANDT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'JOHN@GMAIL.COM', NULL);
INSERT INTO CUSTOMER VALUES (61, 'JOHNY', 'BRANDT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'JOHNY@GMAIL.COM', NULL);

-----2.4-----
UPDATE CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME = 'Walter' WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell'; 
UPDATE ARTIST SET NAME = 'CCR' WHERE NAME = 'Creedence Clearwater Revival';

-----2.5-----
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%'; 

-----2.6-----
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';

-----2.7-----
DELETE FROM INVOICELINE WHERE INVOICEID IN (SELECT INVOICEID FROM INVOICE  WHERE CUSTOMERID IN (SELECT CUSTOMERID FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter'));
DELETE FROM INVOICE WHERE CUSTOMERID IN (SELECT CUSTOMERID FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter');
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';
/
-----3.1-----
create or replace FUNCTION CURTIME
RETURN TIMESTAMP
IS TIME_NOW TIMESTAMP;
BEGIN
    SELECT LOCALTIMESTAMP
    INTO TIME_NOW
    FROM DUAL;
    RETURN (TIME_NOW);
END;

SELECT CURTIME FROM DUAL;
--
/
Create or replace FUNCTION GETLEN(M_ID IN NUMBER)
RETURN NUMBER AS LEN NUMBER;
BEGIN
    --T_NAME AS VARCHAR2;
    SELECT LENGTH(NAME) INTO LEN FROM MEDIATYPE
    WHERE MEDIATYPEID = M_ID;
    RETURN LEN;
END;
/
SELECT LENGTH(NAME) FROM MEDIATYPE;
/
--APPARANTLY I DIDNT HAVE TO CREATE THOSE FUNCTIONS =(
-----3.2-----
--GET AVERAGE OF TOTALS FROM INVOICES
SELECT AVG(TOTAL) FROM INVOICE;
--GET MOST EXPENSIVE TRACK
SELECT MAX(UNITPRICE) FROM TRACK;

-----3.3-----

CREATE OR REPLACE FUNCTION U_D_AVG
RETURN NUMBER AS UDAVG NUMBER;
BEGIN
    SELECT AVG(UNITPRICE) INTO UDAVG FROM INVOICELINE;
    RETURN UDAVG;
END;
/
SELECT U_D_AVG FROM DUAL;
/
-----3.4-----
CREATE OR REPLACE FUNCTION YOUNGBLOOD
RETURN VARCHAR2 AS YB_NAME VARCHAR2;
BEGIN   FOR I IN 1..EMPLOYEE.COUNT(FIRSTNAME)
    LOOP
        SELECT FIRSTNAME INTO YB_NAME FROM EMPLOYEE
        WHERE BIRTHDATE > 31-DEC-1967;
        RETURN YB_NAME;
    END LOOP;
END;


-----4.1-----
--todo isnt working
create or replace PROCEDURE SELECTEMPNAMES
(E_CURS OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN E_CURS FOR
    SELECT FIRSTNAME,LASTNAME FROM EMPLOYEE;
    DBMS_SQL.RETURN_RESULT(E_CURS);
    --COMMIT;
END;
/
--VAR M_CURS REFCURSOR;
--EXECUTE SELECTEMPNAMES(:M_CURS);
--CLOSE M_CURS;

-----4.2-----
create or replace PROCEDURE UPDATEEMP
(EMP_ID NUMBER ,NEW_CITY VARCHAR2, NEW_TITLE VARCHAR2) AS
BEGIN
    UPDATE EMPLOYEE 
    SET CITY = NEW_CITY, 
    TITLE = NEW_TITLE 
    WHERE EMPLOYEEID = EMP_ID;
END;
------
create or replace procedure getManager
(M_CURS OUT SYS_REFCURSOR)
as
begin
    OPEN M_CURS FOR SELECT * FROM EMPLOYEE WHERE TITLE LIKE '%Manager%';
    DBMS_SQL.RETURN_RESULT(M_CURS);
    --COMMIT;
end;
/
--VAR M_CURS REFCURSOR;
--EXECUTE GETMANAGER(:M_CURS);
--CLOSE M_CURS;
-----4.3-----
create or replace PROCEDURE RETURN_NAME_COMPANY_CUST
(CURS OUT SYS_REFCURSOR, CUST_NAME IN VARCHAR2, CUST_LNAME IN VARCHAR2)
AS
BEGIN
    OPEN CURS FOR SELECT FIRSTNAME, LASTNAME, COMPANY FROM CUSTOMER WHERE FIRSTNAME = CUST_NAME AND LASTNAME = CUST_LNAME;
    DBMS_SQL.RETURN_RESULT(CURS);
END;

--VAR M_CURS REFCURSOR;
--EXECUTE RETURN_NAME_COMPANY_CUST(:M_CURS, 'Robert', 'Walter');
--CLOSE M_CURS;

-----5.0-----

CREATE OR REPLACE PROCEDURE DEL_INVOICE
(INV_ID IN NUBER)
AS
BEGIN
    DELETE FROM INVOICELINE WHERE INVOICEID = INV_ID;
    DELETE FROM INVOICE WHERE INVOICEID = INV_ID;
    --COMMIT;
END;

CREATE OR REPLACE PROCEDURE INSERT_RECORD
(F_NAME IN VARCHAR2, L_NAME IN VARCHAR2, C_EMAIL IN VARCHAR2)
AS
CUST_ID NUMBER;
BEGIN
    SELECT (MAX(CUSTOMERID) + 1) INTO CUST_ID FROM CUSTOMER;
    INSERT INTO CUSTOMER VALUES (CUST_ID, F_NAME, L_NAME, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, C_EMAIL, NULL);

END;

EXECUTE INSERT_RECORD('JOHN', 'BRAND THE THIRD', 'JOHN@EMAIL.COM');

------6.1-----
CREATE OR REPLACE TRIGGER IM_TRIGGERED_NOW
AFTER INSERT ON EMPLOYEE
BEGIN
    --WILL EVENTUALLY CRASH BECUASE ADDRESS CAN ONLY BE 70 BYTES
    UPDATE EMPLOYEE SET ADDRESS = 'TRIGGERED ' || TITLE;
END;
--INSERT INTO EMPLOYEE VALUES (22, 'TRIG', 'GERED',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);

SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER TRIGGERED_ON_UPDATE
AFTER UPDATE ON ALBUM
BEGIN
    
    DBMS_OUTPUT.PUT_LINE('SOMETHING WAS UDPATE');
END;
--UPDATE ALBUM SET TITLE = 'EVERYTHING';

CREATE OR REPLACE TRIGGER AFTER_DEL_TRIGGERED
AFTER DELETE ON CUSTOMER
BEGIN
    DBMS_OUTPUT.PUT_LINE('A ROW WAS DELETED, IM TRIGGERED NOW');
END;

--DELETE FROM CUSTOMER WHERE CUSTOMERID = 1;

-----7.1-----

SELECT CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID FROM CUSTOMER
    INNER JOIN INVOICE
    ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

-----7.2-----

SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL
FROM CUSTOMER
FULL OUTER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

-----7.3-----
SELECT ARTIST.NAME, ALBUM.TITLE FROM ALBUM
RIGHT JOIN ARTIST ON ALBUM.ARTISTID = ARTIST.ARTISTID;

-----7.4-----
SELECT * FROM ALBUM
CROSS JOIN ARTIST
ORDER BY ARTIST.NAME ASC;

-----7.5-----
SELECT * FROM EMPLOYEE T1, EMPLOYEE T2 WHERE T1.REPORTSTO = T2.REPORTSTO;




