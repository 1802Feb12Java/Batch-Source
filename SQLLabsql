/**
* Homework 2 SQL Lab
*  Jennifer Fox
**/
--2.0 SQL Queries
--2.1 SELECT
-- 2.1.1 select all records from employee table
SELECT * FROM EMPLOYEE;

-- 2.1.2 select all records from the employee table with last name 'King'
SELECT * FROM EMPLOYEE 
WHERE LASTNAME = 'King';

-- 2.1.3 select all records from the employee table where first anme 'Andrew'
--   and REPORTSTO is NULL
SELECT * FROM EMPLOYEE
WHERE FIRSTNAME = 'Andrew'
AND REPORTSTO IS NULL;

--2.2 ORDER BY
-- 2.2.1 select all albums in album table and sort result set
--  in descending order by title
SELECT * FROM ALBUM
ORDER BY TITLE DESC;

-- 2.2.2 select firstname from customer and sort the result set 
--   in ascending order by city
SELECT FIRSTNAME FROM CUSTOMER
ORDER BY CITY;

--2.3 INSERT INTO
-- 2.3.1 insert two new records into genre table
INSERT INTO GENRE
VALUES(1010, 'Custom');
INSERT INTO GENRE
VALUES(1011, 'Custom2');

-- 2.3.2 insert two new records into employee table
INSERT INTO EMPLOYEE
VALUES(501, 'Fox', 'Jen', 'Official Person', NULL, 
        TO_DATE('1990/05/03', 'yyyy/mm/dd'), NULL, '12345 asdf',NULL, 'WI', 
        'USA', 53189, NULL, NULL, NULL);
INSERT INTO EMPLOYEE
VALUES(502, 'Fox', 'Amy', 'Official Person', NULL, 
        TO_DATE('1992/05/03', 'yyyy/mm/dd'), NULL, '12345 asdf',NULL, 'WI', 
        'USA', 53189, NULL, NULL, NULL);
        
-- 2.3.3 insert two new records into customer table
INSERT INTO CUSTOMER
VALUES(1111, 'Jen', 'Fox', 'Legit Business 22', '1111 oak street',
        'city', 'WI', 'USA', '55555', '222-222-2222', NULL,
        'jfox@places.com', NULL);
        INSERT INTO CUSTOMER
VALUES(1112, 'Amy', 'Fox', 'Legit Business 2', '1111 oak street',
        'city', 'WI', 'USA', '55555', '222-333-2222', NULL,
        'afox@places.com', NULL);
        
--2.4 UPDATE
-- 2.4.1 update Aaron Mitchell in customer table to robert walter
UPDATE CUSTOMER
SET FIRSTNAME='Robert', LASTNAME='Walter'
WHERE FIRSTNAME='Aaron' AND LASTNAME='Mitchell';

-- 2.4.2 update the name of artist in artist table "Creedence Clearwater Revival"
--   to "CCR"
UPDATE ARTIST
SET NAME ='CCR'
WHERE NAME='Creedence Clearwater Revival';

--2.5 LIKE
-- 2.5.1 select all invoice with a billing address like "%T"
SELECT * FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BETWEEN
-- 2.6.1 select all invoices that have a total between 15 and 50
SELECT * FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

-- 2.6.2 select all employees hired between June 1, 2003 and March 1, 2004
SELECT * FROM EMPLOYEE
WHERE HIREDATE BETWEEN TO_DATE('01/06/2003', 'mm/dd/yyyy')
AND TO_DATE('01/03/2004', 'mm/dd/yyyy');

--2.7 DELETE
-- 2.7.1 delete a record in customer table where the name is Robert Walter
DELETE FROM INVOICELINE
WHERE INVOICEID IN
(SELECT INVOICEID FROM
    INVOICE WHERE
    CUSTOMERID IN
    (SELECT CUSTOMERID FROM CUSTOMER
    WHERE FIRSTNAME ='Robert' AND LASTNAME='Walter')); 
--DELETING EM
DELETE FROM INVOICE I
WHERE CUSTOMERID = (SELECT C.CUSTOMERID FROM
    CUSTOMER C WHERE C.FIRSTNAME='Robert' AND C.LASTNAME='Walter');
--FINALLY DELETE ROBERT
DELETE FROM CUSTOMER 
WHERE FIRSTNAME='Robert' AND LASTNAME='Walter';
--IS WALTER GONE??
SELECT * FROM CUSTOMER
WHERE FIRSTNAME='Robert' AND LASTNAME='Walter';


--3.1 SYS DEFINED FUNCTIONS
-- 3.1.1 system function to return current time
SELECT CURRENT_TIMESTAMP FROM DUAL;

-- 3.1.2 function to return length of name in mediatype table
CREATE OR REPLACE FUNCTION NAME_LEN_MEDIA
(M_ID IN NUMBER)
RETURN NUMBER AS MEDIA_LEN NUMBER;
BEGIN
    SELECT LENGTH(NAME) INTO MEDIA_LEN FROM MEDIATYPE
    WHERE MEDIATYPEID = M_ID;
    RETURN MEDIA_LEN;
END;
/
--test it
SELECT NAME_LEN_MEDIA(1) FROM DUAL;

--3.2 System defined aggregate functions
-- 3.2.1 function to return avg total of all invoices
SELECT AVG(TOTAL) FROM INVOICE;

-- 3.2.2 system function to return the most expensive track
SELECT T.* FROM TRACK T JOIN
(SELECT MAX(UNITPRICE) AS MAXP FROM TRACK) B
ON T.UNITPRICE = B.MAXP
WHERE ROWNUM = 1;

--3.3 USER DEFINED SCALAR FUNCTIONS
-- 3.3.1Create a function that returns the average price 
--of invoiceline items (for each invoice) in the invoiceline table
CREATE OR REPLACE FUNCTION INVOICEL_AVG 
(L_ID IN NUMBER)
RETURN NUMBER AS AVG_PRICE NUMBER;
BEGIN
    SELECT AVG(UNITPRICE) INTO AVG_PRICE FROM INVOICELINE
    WHERE INVOICEID = L_ID;
    RETURN AVG_PRICE;
END;
/
SELECT INVOICEL_AVG(1) FROM DUAL;


--3.4 USER DEFINED TABLE VALUED FUNCTIONS
--3.4.1 CREATE A FUNCTION THAT RETURN ALL EMPLOUEES WHO ARE BORN AFTER 1968
create or replace function FIND_OLDIES
 -- (p_loc in number)
  return sys_refcursor
as  
  l_rc sys_refcursor;
begin
  open l_rc
   for select firstname, lastname, birthdate 
         from employee 
        where BIRTHDATE < TO_DATE('1968', 'yyyy')
        ORDER BY BIRTHDATE;

  return l_rc; 
end;
/
select FIND_OLDIES() from dual;
SELECT FIRSTNAME, BIRTHDATE FROM EMPLOYEE
ORDER BY BIRTHDATE;


--4.1 BASIC STORED PROCEDURE
--4.1.1 SELECTS FIRST AND LAST NAMES OF ALL EMPS
CREATE OR REPLACE PROCEDURE SELECT_FIRST_LAST_NAMES
(MYFNAME IN VARCHAR, MYLNAME IN VARCHAR) AS

BEGIN
    SELECT FIRSTNAME, LASTNAME INTO MYFNAME, MYLNAME
    FROM EMPLOYEE;
END;
/
CALL SELECT_FIRST_LAST_NAME('ASDF','ASDF');


--4.2.1
-- create a stored procedure that updates the personal info
--   of an employee
CREATE OR REPLACE PROCEDURE UPDATE_EMP_INFO
(E_ID IN INT, LNAME IN VARCHAR, FNAME IN VARCHAR, T IN VARCHAR,
REPORT IN INT, BDAY IN DATE, HDAY IN DATE, ADDR IN VARCHAR,
CIT IN VARCHAR, ST IN VARCHAR, COUN IN VARCHAR, POST IN VARCHAR, PH IN VARCHAR,
FA IN VARCHAR, EMA IN VARCHAR) AS 
--VARS GO HERE
BEGIN
    UPDATE EMPLOYEE SET EMPLOYEEID = E_ID, LASTNAME = LNAME, FIRSTNAME = FNAME, 
    TITLE = T, REPORTSTO = REPORT, BIRTHDATE = BDAY, HIREDATE = HDAY, ADDRESS = ADDR, 
    CITY = CIT, STATE = ST, COUNTRY = COUN, POSTALCODE = POST, PHONE = PH, FAX = FA, EMAIL = EMA
    WHERE EMPLOYEEID = E_ID;
    COMMIT;
END;
/

--4.2.2
-- create a stored procedure that returns the managers of an employee
CREATE OR REPLACE PROCEDURE RETURN_EMP_MANAGER
(EMPLOYEE_ID IN NUMBER) AS
BEGIN
DECLARE MAN_NAME VARCHAR(30);
BEGIN
    SELECT REPORTSTO INTO MAN_NAME
    FROM EMPLOYEE WHERE EMPLOYEEID = EMPLOYEE_ID;
END;
END;
/
EXECUTE RETURN_EMP_MANAGER(2);

--4.3.1
-- create a stored procedure that retuns the name and company of a customer
CREATE OR REPLACE PROCEDURE RETURN_NAME_COMP
(EMP_ID IN INT, EMP_NAME OUT VARCHAR2, EMP_COMP OUT VARCHAR2) AS 
--VARS GO HERE
BEGIN
    SELECT FIRSTNAME, COMPANY INTO EMP_NAME, EMP_COMP FROM CUSTOMER
    WHERE CUSTOMERID = EMP_ID;
END;
/


DECLARE
EMPNAME VARCHAR(20);
EMPCOMP VARCHAR(20);
CURSOR E_CURS IS
    SELECT FIRSTNAME, COMPANY FROM CUSTOMER;
BEGIN
    OPEN E_CURS;
    LOOP
    RETURN_NAME_COMP(5, EMPNAME, EMPCOMP);
    --OUTPUT IT, || IS PIPE
    DBMS_OUTPUT.PUT_LINE(EMPNAME ||', ' || EMPCOMP);
    END LOOP;
    CLOSE E_CURS;
END;
/

--5.1
--5.1.1 CREATE TRANSACTION THAT GIVEN A INVOICEID WILL DELETE invoice
CREATE OR REPLACE PROCEDURE DELETE_INVOICE
(INVOICENUM IN NUMBER)
AS
BEGIN
    SELECT INVOICEID INTO INVOICENUM
    FROM INVOICE
    WHERE INVOICEID = INVOICENUM;
    COMMIT;
END;
/

--Create a transaction nested in a stored procedure 
--   that inserts a new record in Customer table
CREATE OR REPLACE PROCEDURE ADD_CUSTOMER
(ID IN NUMBER, FNAME IN VARCHAR, LNAME IN VARCHAR, EM IN VARCHAR)
AS
BEGIN
    INSERT INTO CUSTOMER(CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL)
    VALUES(ID, FNAME, LNAME, EM);
    COMMIT;
END;
/
CALL ADD_CUSTOMER(900, 'TEST','TEST','ASDF');
SELECT * FROM CUSTOMER WHERE LASTNAME='TEST';

--6.0 TRIGGERS--
--6.1 Create after insert trigger on the employee table
--  fires after a new record is inserted

--doing a count generater to input into trigger
CREATE SEQUENCE EMPLOYEE_ID_GEN
 MINVALUE 800;

CREATE OR REPLACE TRIGGER GEN_EMP_IDS
AFTER INSERT ON EMPLOYEE 
DECLARE 
    E_ID NUMBER;
BEGIN
    SELECT EMPLOYEE_ID_GEN.NEXTVAL INTO E_ID
     FROM DUAL;
    INSERT INTO ARTIST
    VALUES(E_ID, NULL);
END;
/
INSERT INTO EMPLOYEE(EMPLOYEEID, FIRSTNAME, LASTNAME, CITY)
VALUES(505, 'BOB', 'SMITH', 'A CITY');

SELECT * FROM EMPLOYEE;
SELECT * FROM SCHOOL;
SELECT * FROM ARTIST 
WHERE ARTISTID > 300;
--create an after update trigger on the album table that fires
--  after a row is inserted in the table

SET SERVEROUTPUT ON; --DEFAULT IS OFF
CREATE OR REPLACE TRIGGER UPDATE_ALBUM_TRIGGER
AFTER UPDATE ON ALBUM 
BEGIN
   DBMS_OUTPUT.PUT_LINE('ALBUM TABLE JUST GOT UPDATE');
END;
/
--TEST
UPDATE ALBUM
SET TITLE = 'AUDIOSLAVETEST2'
WHERE ALBUMID = 10;

-- create an after delete trigger on customer table
--  fires after a row is deleted from the table

CREATE OR REPLACE TRIGGER DELETE_CUST_TRIGGER
AFTER DELETE ON CUSTOMER
BEGIN
    DBMS_OUTPUT.PUT_LINE('A ROW WAS DELETED FROM CUSTOMER');
END;
/
--TEST
SELECT * FROM CUSTOMER
WHERE CUSTOMERID >50;

DELETE FROM CUSTOMER
WHERE CUSTOMERID=1112;


--7.1 INNER JOIN

--CREATE AN INNER JOIN THAT JOINS CUSTOMERS AND INVOICE TABLE
--SPECIFYING THE CUSTOMERID, FIRSTNAME, LASTNAME,INVOICEID, AND TOTAL
SELECT A.CUSTOMERID, A.FIRSTNAME, A.LASTNAME, B.INVOICEID, B.TOTAL
FROM CUSTOMER A
INNER JOIN INVOICE B
ON B.CUSTOMERID = A.CUSTOMERID;

--7.2 OUTER JOIN
--JOIN CUSTOMER AND INVOICE TABLE
--SHOWING CUSTOMERID, FIRSTNAME, LASTNAME, INVOICE ID, AND TOTAL
SELECT A.CUSTOMERID, A.FIRSTNAME, A.LASTNAME, B.INVOICEID, B.TOTAL
FROM CUSTOMER A 
FULL OUTER JOIN INVOICE B
ON A.CUSTOMERID = B.CUSTOMERID;

--7.3 RIGHT JOIN
--JOINS ALBUM AND ARTIST
--SHOWING ARTIST NAME AND TITLE
SELECT B.NAME, A.TITLE
FROM ALBUM A
RIGHT JOIN ARTIST B
ON A.ARTISTID = B.ARTISTID;

--7.4 CROSS JOIN
--JOIN ALBUM AND ARTIST
--SORTS BY ARTIST NAME IN ASC ORDER
SELECT * FROM ALBUM A
CROSS JOIN ARTIST B;

--7.5 SELF JOIN
--ON EMPLOYEE TABLE
--JOIN ON REPORTSTO COL
SELECT * FROM EMPLOYEE A
LEFT OUTER JOIN EMPLOYEE B
ON A.REPORTSTO = B.REPORTSTO;
