--2.1 SELECT
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME='King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME='Andrew' AND REPORTSTO IS NULL;

--2.2 ORDER BY
SELECT * FROM ALBUM ORDER BY TITLE DESC;
SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY;

--2.3 INSERT INTO
---2.3.1
INSERT INTO GENRE (GENREID,NAME) VALUES (26, 'Videogame Soundtracks');
INSERT INTO GENRE (GENREID,NAME) VALUES (27, 'Elevator Music');
---2.3.2
INSERT INTO EMPLOYEE VALUES (9,'Hsieh','Kevin','Dog Petter',null,TO_DATE('1994-6-18 00:00:00','yyyy-mm-dd hh24:mi:ss'),
                             TO_DATE('2018-2-21 00:00:00','yyyy-mm-dd hh24:mi:ss'),'222 Green Oaks drive','Riverside','CA',
                             'USA','92507','+1 (951) 824-0227','+1 (403) 262-3322','kevin@gmail.com');
INSERT INTO EMPLOYEE VALUES (10,'D2','R2','robot',9,TO_DATE('2589-12-6 00:00:00','yyyy-mm-dd hh24:mi:ss'),
                             TO_DATE('2018-2-22 00:00:00','yyyy-mm-dd hh24:mi:ss'),'001 Galaxy Way','Tatooine','CA',
                             'Space','99999','+0 (000) 000-0000','+9 (999) 999-9999','beep@gmail.com');
---2.3.3
INSERT INTO CUSTOMER VALUES (60,'SO','K2','Rebllion','1 Rogue','Base','CA','Yavin','00000','+5 (456) 456-4566',
                             '+1 (789) 789-7899','email@gmail.com',9);
                             
INSERT INTO CUSTOMER VALUES (61,'PO','C3','Rebllion','2 Droid','Base','CA','Tatoonie','00000','+8 (888) 888-8888',
                             '+1 (111) 789-4444','email@gmail.com',10);
--2.4 UPDATE
UPDATE CUSTOMER SET FIRSTNAME='Robert', LASTNAME='Walter' WHERE FIRSTNAME='Aaron' AND LASTNAME='Mitchell';
UPDATE ARTIST SET NAME='CCR' WHERE NAME='Creedence Clearwater Revival';

--2.5 LIKE
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BETWEEN
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN TO_DATE('2003-06-01', 'YYYY-MM-DD') AND TO_DATE('2004-03-01', 'YYYY-MM-DD');

--2.7 DELETE
---Constraints: Invoice, deleting all invoice entries that has the same customerid
DELETE FROM INVOICELINE WHERE INVOICEID IN 
    (SELECT INVOICEID FROM INVOICE WHERE CUSTOMERID=
    (SELECT CUSTOMERID FROM CUSTOMER WHERE FIRSTNAME='Robert' AND LASTNAME='Walter'));
    
DELETE FROM INVOICE WHERE CUSTOMERID=(SELECT CUSTOMERID FROM CUSTOMER WHERE FIRSTNAME='Robert' AND LASTNAME='Walter');
DELETE FROM CUSTOMER WHERE FIRSTNAME='Robert' AND LASTNAME='Walter';

--3.1
SELECT LOCALTIMESTAMP FROM DUAL;
SELECT LENGTH(NAME) FROM MEDIATYPE;

--3.2
SELECT AVG(TOTAL) FROM INVOICE;
SELECT NAME FROM TRACK WHERE UNITPRICE IN (SELECT MAX(UNITPRICE) FROM TRACK);

--3.3

CREATE OR REPLACE FUNCTION AVG_PRICE 
RETURN NUMBER AS 
AVG_P NUMBER;
BEGIN
    SELECT AVG(UNITPRICE)
    INTO AVG_P
    FROM INVOICELINE;
    RETURN AVG_P;
END;
/

SELECT AVG_PRICE() FROM DUAL;

--3.4
CREATE OR REPLACE FUNCTION OLD_PEOPLE
    RETURN SYS_REFCURSOR
AS
    L_RC SYS_REFCURSOR;
BEGIN
    OPEN L_RC
    FOR SELECT FIRSTNAME, LASTNAME, BIRTHDATE
        FROM EMPLOYEE
        WHERE BIRTHDATE < TO_DATE('1968','yyyy')
        ORDER BY BIRTHDATE;
    RETURN L_RC;    
END;
/

SELECT OLD_PEOPLE() FROM DUAL;

--4.1
CREATE OR REPLACE PROCEDURE EMPLOYEE_NAMES
(E_ID IN NUMBER,
 O_FNAME OUT EMPLOYEE.FIRSTNAME%TYPE,
 O_LNAME OUT EMPLOYEE.LASTNAME%TYPE)
AS
BEGIN
    SELECT FIRSTNAME, LASTNAME
    INTO O_FNAME, O_LNAME
    FROM EMPLOYEE
    WHERE EMPLOYEE.EMPLOYEEID=E_ID;
END;
/

DECLARE
FNAME EMPLOYEE.FIRSTNAME%TYPE;
LNAME EMPLOYEE.LASTNAME%TYPE;
BEGIN
    EMPLOYEE_NAMES(2,FNAME,LNAME);
    DBMS_OUTPUT.PUT_LINE('FNAME: ' || FNAME);
    DBMS_OUTPUT.PUT_LINE('LNAME: ' || LNAME);
END;
/

---4.2.1
CREATE OR REPLACE PROCEDURE EMPLOYEE_UPDTAE
(E_ID IN NUMBER, 
 E_FNAME IN EMPLOYEE.FIRSTNAME%TYPE,
 E_LNAME IN EMPLOYEE.LASTNAME%TYPE,
 E_TITLE IN EMPLOYEE.TITLE%TYPE,
 E_R_TO IN EMPLOYEE.REPORTSTO%TYPE,
 E_BDATE IN EMPLOYEE.BIRTHDATE%TYPE,
 E_HDATE IN EMPLOYEE.HIREDATE%TYPE,
 E_ADDR IN EMPLOYEE.ADDRESS%TYPE,
 E_CITY IN EMPLOYEE.CITY%TYPE,
 E_STATE IN EMPLOYEE.STATE%TYPE,
 E_COUNTRY IN EMPLOYEE.COUNTRY%TYPE,
 E_POST IN EMPLOYEE.POSTALCODE%TYPE,
 E_PHONE IN EMPLOYEE.PHONE%TYPE,
 E_FAX IN EMPLOYEE.FAX%TYPE,
 E_EMAIL IN EMPLOYEE.EMAIL%TYPE
)
AS
BEGIN
    UPDATE EMPLOYEE
    SET FIRSTNAME=E_FNAME,
        LASTNAME=E_LNAME,
        TITLE=E_TITLE,
        REPORTSTO=E_R_TO,
        BIRTHDATE=E_BDATE,
        HIREDATE=E_HDATE,
        ADDRESS=E_ADDR,
        CITY=E_CITY,
        STATE=E_STATE,
        COUNTRY=E_COUNTRY,
        POSTALCODE=E_POST,
        PHONE=E_PHONE,
        FAX=E_FAX,
        EMAIL=E_EMAIL
        WHERE EMPLOYEE.EMPLOYEEID=E_ID;
END;
/

---4.2.2
CREATE OR REPLACE PROCEDURE FIND_MANAGER
(E_ID IN EMPLOYEE.EMPLOYEEID%TYPE,
 O_ID OUT EMPLOYEE.REPORTSTO%TYPE)
AS
BEGIN
    SELECT EMPLOYEE.REPORTSTO INTO O_ID
    FROM EMPLOYEE WHERE EMPLOYEE.EMPLOYEEID=E_ID;
END;

--4.3
CREATE OR REPLACE PROCEDURE FIND_COMPANY
(C_ID IN CUSTOMER.CUSTOMERID%TYPE,
 O_FNAME OUT CUSTOMER.FIRSTNAME%TYPE,
 O_LNAME OUT CUSTOMER.LASTNAME%TYPE,
 O_COMP OUT CUSTOMER.COMPANY%TYPE)
AS
BEGIN
    SELECT CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, CUSTOMER.COMPANY
    INTO O_FNAME, O_LNAME, O_COMP
    FROM CUSTOMER
    WHERE CUSTOMER.CUSTOMERID=C_ID;
END;
/

--5.0 TRANSACTIONS
---5.0.1
CREATE OR REPLACE PROCEDURE DEL_INVOICE
(I_ID IN INVOICE.INVOICEID%TYPE)
AS
BEGIN
    DELETE FROM INVOICELINE WHERE INVOICEID IN I_ID;
    DELETE FROM INVOICE WHERE INVOICEID=I_ID;
END;
/

---5.0.2
CREATE OR REPLACE PROCEDURE ADD_CUSTOMER
(C_ID IN CUSTOMER.CUSTOMERID%TYPE,
 C_FNAME IN CUSTOMER.FIRSTNAME%TYPE,
 C_LNAME IN CUSTOMER.LASTNAME%TYPE,
 C_COMP IN CUSTOMER.COMPANY%TYPE,
 C_ADDR IN CUSTOMER.ADDRESS%TYPE,
 C_CITY IN CUSTOMER.CITY%TYPE,
 C_STATE IN CUSTOMER.STATE%TYPE,
 C_COUNTRY IN CUSTOMER.COUNTRY%TYPE,
 C_POST IN CUSTOMER.POSTALCODE%TYPE,
 C_PHONE IN CUSTOMER.PHONE%TYPE,
 C_FAX IN CUSTOMER.FAX%TYPE,
 C_EMAIL IN CUSTOMER.EMAIL%TYPE,
 C_SUPID IN CUSTOMER.SUPPORTREPID%TYPE)
AS
BEGIN
    INSERT INTO CUSTOMER 
    VALUES (C_ID,C_FNAME,C_LNAME,C_COMP,C_ADDR,C_CITY,C_STATE,C_COUNTRY,C_POST,C_PHONE,C_FAX,C_EMAIL,C_SUPID);
END;
/

--6.1 AFTER/FOR
---6.1.1
CREATE OR REPLACE TRIGGER NEW_EMPLOYEE
AFTER INSERT ON EMPLOYEE
BEGIN
    DBMS_OUTPUT.PUT('NEW EMPLYOEE ADDED!');
END;
/

---6.1.2
CREATE OR REPLACE TRIGGER UPDATE_ALBUM
AFTER UPDATE ON ALBUM
BEGIN
    DBMS_OUTPUT.PUT('ABLUM UPDATED!');
END;

---6.1.3
CREATE OR REPLACE TRIGGER DELETE_CUSTOMER
AFTER DELETE ON CUSTOMER
BEGIN
    DBMS_OUTPUT.PUT('CUSTOMER DELETEED!');
END;

--7.0 JOINS
--7.1 INNER
SELECT * FROM CUSTOMER INNER JOIN INVOICE ON INVOICE.CUSTOMERID=CUSTOMER.CUSTOMERID;

--7.2 OUTER
SELECT C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, I.INVOICEID, I.TOTAL 
FROM CUSTOMER C FULL OUTER JOIN INVOICE I ON I.CUSTOMERID=C.CUSTOMERID;

--7.3 RIGHT
SELECT AR.NAME, AL.TITLE
FROM ARTIST AR RIGHT OUTER JOIN ALBUM AL ON AL.ARTISTID=AR.ARTISTID;

--7.4 CROSS
SELECT * FROM ALBUM AL CROSS JOIN ARTIST AR ORDER BY AR.NAME;

--7.5 SELF
SELECT * FROM EMPLOYEE EM_A, EMPLOYEE EM_B
WHERE EM_A.REPORTSTO=EM_B.REPORTSTO;
