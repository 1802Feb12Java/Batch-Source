--2.1
SELECT *
FROM EMPLOYEE;

SELECT *
FROM EMPLOYEE
WHERE LASTNAME = 'King';

SELECT *
FROM EMPLOYEE
WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--2.2
SELECT *
FROM ALBUM
ORDER BY TITLE DESC;

SELECT FIRSTNAME
FROM CUSTOMER 
ORDER BY CITY;

--2.3
INSERT INTO GENRE
VALUES(100, 'Horror');

INSERT INTO GENRE
VALUES(200, 'Comedy');

INSERT INTO EMPLOYEE
VALUES(100, 'Bob', 'Jim', 'Professional Bobber', 7, '9-JAN-60', '9-JAN-78', '1112 Bobbin Av.', 'Edmonton','AB', 'Canada', 'T3S 3M3', '(330)-401-4421', '333-322-2223', 
'BobbyBobberJim@gmail.com');

INSERT INTO EMPLOYEE
VALUES(101, 'Smith', 'Alissa', 'Programmer', 7, '20-FEB-95', '12-AUG-17', '2312 Madison Dr.', 'Edmonton','AB', 'Canada', 'T5K 2L5', '(251)-291-4839', '444-411-4442', 
'AlissaSmith2312@gmail.com');

INSERT INTO CUSTOMER
VALUES(60, 'Hellen', 'Kelner', 'Hellen Company', '1321 Culler Dr', 'Atlanta', 'GA', 'USA', '123456', '330-402-1321', '111-111-1111',
'Kelner89@gmail.com', 3);

INSERT INTO CUSTOMER
VALUES(61, 'Bushal', 'George', 'Hellen Company', '1321 Culler Dr', 'Florida', 'FL', 'USA', '654321', '324-533-7583', '555-534-5324',
'GeorgeBushal@gmail.com', 3);

--2.4

UPDATE CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

--2.5
SELECT *
FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--2.6
SELECT *
FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

SELECT *
FROM EMPLOYEE
WHERE HIREDATE BETWEEN '01-Jun-03' AND '01-MAR-04';

--2.7
--found your invoices robert
SELECT *
FROM INVOICE
WHERE CUSTOMERID = 32;

--I found all invoiceline's robert
SELECT * 
FROM INVOICELINE
WHERE INVOICEID IN(
    SELECT INVOICEID
    FROM INVOICE
    WHERE CUSTOMERID = 32);

--Im taking your invoiceline's robert    
DELETE FROM INVOICELINE
WHERE INVOICEID IN(
    SELECT INVOICEID
    FROM INVOICE
    WHERE CUSTOMERID = 32);

--im deleting your invoices robert
DELETE FROM INVOICE
WHERE CUSTOMERID = 32;

--Goodbye Robert
DELETE FROM CUSTOMER
WHERE CUSTOMERID = 32;

--3.1
--SYSTIMESTAMP returns the system date, including fractional seconds and time zone, of the system on which the database resides. The return type is
--TIMESTAMP WITH TIME ZONE.
SELECT SYSTIMESTAMP FROM DUAL;

SELECT LENGTH(NAME)
FROM MEDIATYPE;

--3.2
SELECT AVG(TOTAL)
FROM INVOICE;

SELECT MAX(UNITPRICE)
FROM INVOICELINE;

--3.3
CREATE OR REPLACE FUNCTION AVERAGE_UNITPRICE  
RETURN NUMBER AS
AVG_UNITPRICE INT;
BEGIN  
    SELECT AVG(UNITPRICE)
    INTO AVG_UNITPRICE
    FROM INVOICELINE;
    RETURN AVG_UNITPRICE;
END;

SELECT AVERAGE_UNITPRICE FROM DUAL;

--3.4
SELECT *
FROM EMPLOYEE
WHERE BIRTHDATE >= '01-JAN-69';

--4.1 
CREATE OR REPLACE PROCEDURE getEmployeeNames
(printer out sys_refcursor) IS
BEGIN
    OPEN printer 
    FOR
    SELECT FIRSTNAME, LASTNAME
    FROM EMPLOYEE; 
    DBMS_SQL.RETURN_RESULT(printer);
END;

--call the function
var printer refcursor;
execute getEmployeeNames(:printer);

--4.2
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEES(EMPLOYEE NUMBER, LAST_NAME VARCHAR2, FIRST_NAME VARCHAR2, TITLE_ VARCHAR2, BIRTHDATE_ DATE, HIREDATE_ DATE, ADDRESS_ VARCHAR2,
CITY_ VARCHAR2, POSTAL_CODE VARCHAR2, PHONE_ VARCHAR2, FAX_ VARCHAR2, EMAIL_ VARCHAR2)AS
BEGIN
    UPDATE EMPLOYEE
    SET LASTNAME = LAST_NAME, FIRSTNAME = FIRST_NAME, TITLE = TITLE_, BIRTHDATE = BIRTHDATE_, HIREDATE = HIREDATE_,
    ADDRESS = ADDRESS_, CITY = CITY_, POSTALCODE = POSTAL_CODE, PHONE = PHONE_, FAX = FAX_, EMAIL = EMAIL_
    WHERE EMPLOYEEID = EMPLOYEE;
END;

CREATE OR REPLACE PROCEDURE GET_EMPLOYEE_MANAGERS(EMPLOYEE NUMBER, printer out sys_refcursor) IS
BEGIN
    OPEN printer 
    FOR
    SELECT REPORTSTO
    FROM EMPLOYEE
    WHERE EMPLOYEEID = EMPLOYEE;
    DBMS_SQL.RETURN_RESULT(printer);
END;

CREATE OR REPLACE PROCEDURE GET_EMPLOYEE_MANAGERS(EMPLOYEE NUMBER, printer out sys_refcursor) IS
BEGIN
    OPEN printer 
    FOR
    SELECT FIRSTNAME, LASTNAME
    FROM EMPLOYEE
    WHERE EMPLOYEEID = (
        SELECT REPORTSTO
        FROM EMPLOYEE
        WHERE EMPLOYEEID = EMPLOYEE);
    DBMS_SQL.RETURN_RESULT(printer);
END;

var printer refcursor;
execute GET_EMPLOYEE_MANAGERS(2,:printer);

--4.3
CREATE OR REPLACE PROCEDURE GET_CUSTOMER_COMPANY(CUSTOMER NUMBER, printer out sys_refcursor) IS
BEGIN
    OPEN printer
    FOR 
    SELECT COMPANY
    FROM CUSTOMER
    WHERE CUSTOMERID = CUSTOMER;
    DBMS_SQL.RETURN_RESULT(printer);
END;

var printer refcursor;
execute GET_CUSTOMER_COMPANY(5,:printer);

--5.0
CREATE OR REPLACE PROCEDURE DeleteInvoice(Invoice_ID int) IS
BEGIN
    DELETE FROM INVOICE
    WHERE INVOICEID = Invoice_ID;   
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE DeleteInvoice(Invoice_ID int) IS
BEGIN
    DELETE FROM INVOICE
    WHERE INVOICEID = Invoice_ID;   
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE InsertCustomer(CUSTOMER_ID INT, FIRST_NAME VARCHAR, LAST_NAME VARCHAR, COMPANY_ VARCHAR, ADDRESS_ VARCHAR, CITY_ VARCHAR,
STATE_ VARCHAR, COUNTRY_ VARCHAR, POSTAL_CODE VARCHAR, PHONE_ VARCHAR, FAX_ VARCHAR, EMAIL_ VARCHAR, SUPPORTREPID_ INT) IS
BEGIN
    INSERT INTO CUSTOMER
    VALUES(CUSTOMER_ID, FIRST_NAME, LAST_NAME, COMPANY_, ADDRESS_, CITY_, STATE_, COUNTRY_, POSTAL_CODE, PHONE_, FAX_, EMAIL_, SUPPORTREPID_);
    COMMIT;
END;

--6.0
CREATE SEQUENCE EmployeeIDTrigger
MINVALUE 103
MAXVALUE 9999
START WITH 103
INCREMENT BY 1;

--set EmployeeID by default to 10000, and it will automatically incremented to the correct number after insert
CREATE SEQUENCE AlbumIDTrigger
MINVALUE 348
MAXVALUE 9999
START WITH 348
INCREMENT BY 1;

--need to find problem with this one
CREATE OR REPLACE TRIGGER InsertEmployeeTrigger
AFTER INSERT ON Employee
BEGIN
    DBMS_OUTPUT.PUT_LINE('Inserted Employee');
END;

--set AlbumID by default to 10000, and it will automatically incremented to the correct number after insert
CREATE OR REPLACE TRIGGER InsertAlbumTrigger
AFTER INSERT ON Album
BEGIN
    UPDATE Album
    SET AlbumID = AlbumIDTrigger.NEXTVAL
    WHERE AlbumID = 10000;
END;

/
CREATE OR REPLACE TRIGGER DeleteCustomerTrigger
AFTER DELETE ON CUSTOMER
BEGIN
    DBMS_OUTPUT.PUT_LINE('DELETED CUSTOMER');
END;

/
--7.0
SELECT CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID
FROM CUSTOMER
INNER JOIN INVOICE ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;

SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL
FROM CUSTOMER
FULL OUTER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

SELECT ARTIST.NAME, ALBUM.TITLE
FROM ARTIST
RIGHT JOIN ALBUM ON ARTIST.ARTISTID = ALBUM.ARTISTID;

SELECT *
FROM ARTIST
CROSS JOIN ALBUM
ORDER BY NAME;

--not sure what he wants here
SELECT A.REPORTSTO, B.REPORTSTO, A.FIRSTNAME
FROM EMPLOYEE A, EMPLOYEE B
WHERE A.REPORTSTO = B.REPORTSTO;


