-- SELECT --

SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;\

-- 2.2 ORDER BY --

SELECT TITLE FROM ALBUM
    ORDER BY TITLE DESC;

SELECT FIRSTNAME FROM CUSTOMER
    ORDER BY CITY;
    
-- 2.3 INSERT --

INSERT INTO GENRE
    VALUES(26, 'Horror');
    
INSERT INTO GENRE
    VALUES(27, 'Emo');

INSERT INTO EMPLOYEE
    VALUES(9, 'Suresh', 'Pooja', 'Designer', 2, '19-JULY-96', '07-FEB-18', '21 Alabama Rd', 'Howell', 'NJ', 'USA', 'T2H 2N1', '+1 (253) 252-3464', '+1 (464) 363-3382', 'sjdhdgd@hdbd.com');
    
INSERT INTO EMPLOYEE
    VALUES(10, 'Azmi', 'Amna', 'Doctor', 1, '31-OCT-95', '12-JUNE-18', '32 Fletcher Ave', 'Tampa', 'FL', 'USA', 'T2H 2N1', '+1 (253) 252-3464', '+1 (464) 363-3382', 'sjdhdgd@hdbd.com');
    
INSERT INTO CUSTOMER
    VALUES(60, 'Noah', 'Trevor', NULL, '42 Dhdn Rd', 'Tampa', 'FL', 'USA', 21536, '+1 362-2726', NULL, 'hdhd@hdnd.ah', 2);
    
INSERT INTO CUSTOMER
    VALUES(61, 'Meyers', 'Seth', NULL, '21 Dhdns Ave', 'Fdvbsks', 'TX', 'USA', 21266, '+1 856-3537', NULL, 'hdhd@hdnd.ah', 2);
    
-- 2.4 UPDATE --

UPDATE CUSTOMER 
    SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
    WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';
    
UPDATE ARTIST
    SET NAME = 'CCR'
    WHERE NAME = 'Creedence Clearwater Revival';
    
-- 2.5 LIKE --

SELECT * FROM INVOICE
    WHERE BILLINGADDRESS LIKE 'T%';

-- 2.6 BETWEEN --

SELECT * FROM INVOICE
    WHERE TOTAL BETWEEN 15 AND 50;
    
SELECT * FROM EMPLOYEE
    WHERE HIREDATE BETWEEN '01-JUNE-03' AND '01-MARCH-04';

-- 2.7 DELETE TRY --
ALTER TABLE INVOICE
    DROP CONSTRAINT FK_INVOICECUSTOMERID;
    ALTER TABLE INVOICE
    ADD CONSTRAINT FK_INVOICECUSTOMERID
        FOREIGN KEY(CUSTOMERID) REFERENCES CUSTOMER(CUSTOMERID)
        ON DELETE CASCADE;

ALTER TABLE INVOICELINE
    DROP CONSTRAINT FK_INVOICELINEINVOICEID;
    ALTER TABLE INVOICELINE
    ADD CONSTRAINT FK_INVOICELINEINVOICEID
        FOREIGN KEY(INVOICEID) REFERENCES INVOICE(INVOICEID)
        ON DELETE CASCADE;

DELETE FROM CUSTOMER
    WHERE FIRSTNAME='Robert' AND LASTNAME='Walter';
/

/* FUNCTIONS */

-- 3.1 SYSTEM DEFINED FUNCTIONS --

CREATE OR REPLACE FUNCTION GETSYSTIME
    RETURN TIMESTAMP IS
        timeNow TIMESTAMP;
    BEGIN
        SELECT LOCALTIMESTAMP INTO timeNow FROM DUAL;
        RETURN timeNow;
    END GETSYSTIME;
/

CREATE OR REPLACE FUNCTION MEDIA_LEN(ID IN NUMBER)
    RETURN NUMBER IS
    LEN NUMBER;
    NAME VARCHAR2;
    BEGIN
        SELECT NAME INTO NAME FROM MEDIATYPE;
        LEN := LENGTH(NAME);
        RETURN LEN;
    END MEDIA_LEN;
/

-- 3.2 SYSTEM DEFINED AGGREGATE FUNCTIONS --

CREATE OR REPLACE FUNCTION Avg_Title
    RETURN NUMBER
IS
    AVG_INVOICE NUMBER(38,2);
BEGIN
    SELECT AVG(TOTAL) INTO AVG_INVOICE FROM INVOICE;
    RETURN AVG_INVOICE;
END Avg_Title;
/

CREATE OR REPLACE FUNCTION Most_Expense
    RETURN NUMBER
IS
    MAXPRICE NUMBER;
BEGIN
    SELECT MAX(UNITPRICE) INTO MAXPRICE FROM TRACK
    ORDER BY TRACKID
    FETCH FIRST 1 ROWS ONLY;
    RETURN MAXPRICE;
END Most_Expense;
/

-- 3.3 USER DEFINED SCALAR FUNCTIONS --

CREATE OR REPLACE FUNCTION Avg_Invoice
    RETURN SYS_REFCURSOR
IS
    AVG_VALS SYS_REFCURSOR;
BEGIN
    OPEN AVG_VALS FOR
        SELECT INVOICEID, (AVG(UNITPRICE)) FROM INVOICELINE
            GROUP BY INVOICEID
            ORDER BY INVOICEID ASC;
    RETURN AVG_VALS;
END Avg_Invoice;
/

-- 3.4 USER DEFINED TABLE VALUED FUNCTIONS --

CREATE OR REPLACE FUNCTION Old_Emp
    RETURN SYS_REFCURSOR
IS
    EMP SYS_REFCURSOR;
BEGIN
    OPEN EMP FOR
        SELECT * FROM EMPLOYEE
        WHERE BIRTHDATE > '31-DEC-1968';
    RETURN EMP;    
END Old_Emp;
/

-- 4,1 BASIC STORED PROCEDURE --

CREATE OR REPLACE PROCEDURE Emp_Names(EMPLOYEES OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN EMPLOYEES FOR
        SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
END Emp_Names;
/

-- 4.2 STORED PROCEDURE INPUT PARAMETERS --

CREATE OR REPLACE PROCEDURE Emp_Address
    (ID IN NUMBER, NADDR IN VARCHAR2, NCITY IN VARCHAR2, 
     NSTATE IN VARCHAR2, NCOUNTRY IN VARCHAR2, NZIP IN VARCHAR2)
IS
BEGIN
    UPDATE EMPLOYEE
    SET ADDRESS=NADDR, CITY=NCITY, STATE=NSTATE, COUNTRY=NCOUNTRY, POSTALCODE=NZIP
    WHERE EMPLOYEEID=ID;
END;
/

-- 4.3 STORED PROCEDUREOUTPUT PARAMETERS --

CREATE OR REPLACE PROCEDURE GET_MANAGER(MANAGERS OUT SYS_REFCURSOR, EMP_ID IN NUMBER)
IS
    MANAGER_ID NUMBER;
BEGIN
    SELECT REPORTSTO INTO MANAGER_ID FROM EMPLOYEE;
    OPEN MANAGERS FOR
        SELECT * FROM EMPLOYEE WHERE EMPLOYEEID=MANAGER_ID;
END;
/

-- 5.0 TRANSACTIONS --

CREATE OR REPLACE PROCEDURE DELETE_INVOICE(INVOICE_ID IN NUMBER)
IS
BEGIN
    DELETE FROM INVOICE
        WHERE INVOICEID=INVOICE_ID;
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE PUT_NEW_CUSTOMER
    (FNAME IN VARCHAR2, LNAME IN VARCHAR2, COMPANY IN VARCHAR2,
     CADDR IN VARCHAR2, CCITY IN VARCHAR2, CSTATE IN VARCHAR2, CCOUNTRY IN VARCHAR2, CZIP IN VARCHAR2,
     CPHONE IN VARCHAR2, CFAX IN VARCHAR2, CEMAIL IN VARCHAR2, CSUPPORTREPID IN NUMBER) IS
    NEWID NUMBER;
        BEGIN
            SELECT MAX(CUSTOMERID) INTO NEWID FROM CUSTOMER;
            NEWID := NEWID + 1;
    
            INSERT INTO CUSTOMER
                VALUES(NEWID, FNAME, LNAME, COMPANY, 
                    CADDR, CCITY, CSTATE, CCOUNTRY, CZIP, 
                    CPHONE, CFAX, CEMAIL, CSUPPORTREPID);
            COMMIT;
        END;
/


-- 6.1 Triggers [After/For]:

CREATE OR REPLACE TRIGGER NEW_EMPLOYEE_TRIGGER
    AFTER INSERT ON EMPLOYEE
    BEGIN
        DBMS_OUTPUT.PUT_LINE('TRIGGERED EMPLOYEE AFTER INSERT');
    END;
/

CREATE OR REPLACE TRIGGER UPDATE_ALBUM_TRIGGER
    AFTER UPDATE ON ALBUM
    BEGIN
        DBMS_OUTPUT.PUT-LINE('TRIGGERED ALBUM AFTER UPDATE');
    END;
/

CREATE OR REPLACE TRIGGER DELETE_CUST_TRIGGER
    AFTER DELETE ON CUSTOMER
    BEGIN
        DBMS_OUTPUT.PUT_LINE('TRIGGERED CUSTOMER AFTER DELETION');
    END;
/


-- 7.0 Joins


-- 7.1 INNER JOIN

SELECT INVO.INVOICEID, CUST.FIRSTNAME, CUST.LASTNAME
    FROM CUSTOMER CUST
    INNER JOIN INVOICE INVO
    ON CUST.CUSTOMERID=INVO.CUSTOMERID;
/

-- 7.2 OUTER JOIN

SELECT INVO.INVOICEID, CUST.FIRSTNAME, CUST.LASTNAME, INVO.TOTAL
    FROM CUSTOMER CUST
    FULL JOIN INVOICE INVO
    ON CUST.CUSTOMERID=INVO.CUSTOMERID;
/

-- 7.3 RIGHT JOIN

SELECT ART.NAME, ALB.TITLE
    FROM ALBUM ALB
    RIGHT JOIN ARTIST ART
    ON ALB.ARTISTID =ART.ARTISTID;
/

-- 7.4 CROSS JOIN

SELECT ART.NAME, ALB.TITLE
    FROM ALBUM ALB
    CROSS JOIN ARTIST ART
    ORDER BY ART.NAME ASC;
/

-- 7.5 SELF JOIN

SELECT E1.FIRSTNAME, E1.LASTNAME, E2.FIRSTNAME, E2.LASTNAME
    FROM EMPLOYEE E1, EMPLOYEE E2
    WHERE E1.REPORTSTO=E2.EMPLOYEEID;
/