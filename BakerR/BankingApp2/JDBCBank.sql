-- Setup USERS Table.
CREATE TABLE USERS(
    USERID NUMBER PRIMARY KEY,
    USERNAME VARCHAR2(64) UNIQUE,
    USERTYPE NUMBER,
    FIRSTNAME VARCHAR2(64) NOT NULL,
    LASTNAME VARCHAR2(64) NOT NULL,
    PASSHASH VARCHAR2(512) NOT NULL
);

ALTER TABLE USERS
ADD CONSTRAINT CHECK_USERSUSERTYPE
CHECK (USERTYPE IN (0, 1, 2));


-- Setup ACCOUNTS table.
CREATE TABLE ACCOUNTS(
    ACCOUNTID NUMBER PRIMARY KEY,
    ACTIVE NUMBER,
    OWNER NUMBER,
    BALANCE NUMBER(38, 2)
);

ALTER TABLE ACCOUNTS
ADD CONSTRAINT FK_OWNERUSERID
FOREIGN KEY(OWNER)
REFERENCES USERS(USERID)
ON DELETE CASCADE;

ALTER TABLE ACCOUNTS
ADD CONSTRAINT CHECK_ACCOUNTSACTIVE
CHECK (ACTIVE IN (0,1));

ALTER TABLE ACCOUNTS
ADD CONSTRAINT CHECK_ACCOUNTSBALANCE
CHECK (BALANCE >= 0);


-- Setup sequences for PKs
CREATE SEQUENCE PK_USERS
START WITH 0
INCREMENT BY 1
MINVALUE 0
NOMAXVALUE
NOCYCLE
NOORDER
;

CREATE SEQUENCE PK_ACCOUNTS
START WITH 0
INCREMENT BY 1
MINVALUE 0
NOMAXVALUE
NOCYCLE
NOORDER
;


-- Stored Procedures
CREATE OR REPLACE PROCEDURE DEPOSIT
    (ACCT_ID IN NUMBER, AMOUNT IN NUMBER)
IS
    BAL NUMBER(38,2);
BEGIN
    SELECT BALANCE INTO BAL FROM ACCOUNTS WHERE ACCOUNTID=ACCT_ID;
    BAL := BAL + AMOUNT;
    UPDATE ACCOUNTS SET BALANCE=BAL WHERE ACCOUNTID=ACCT_ID;
END;
/

CREATE OR REPLACE PROCEDURE WITHDRAW
    (ACCT_ID IN NUMBER, AMOUNT IN NUMBER)
IS
    BAL NUMBER(38,2);
BEGIN
    SELECT BALANCE INTO BAL FROM ACCOUNTS WHERE ACCOUNTID=ACCT_ID;
    BAL := BAL - AMOUNT;
    UPDATE ACCOUNTS SET BALANCE=BAL WHERE ACCOUNTID=ACCT_ID;
END;
/

CREATE OR REPLACE PROCEDURE TRANSFER
    (FROM_ACCTID IN NUMBER, TO_ACCTID IN NUMBER, AMOUNT IN NUMBER)
IS
BEGIN
    WITHDRAW(FROM_ACCTID, AMOUNT);
    DEPOSIT(TO_ACCTID, AMOUNT);
END;
/

CREATE OR REPLACE PROCEDURE VERIFYPW
    (ISMATCH OUT BOOLEAN, UNAME IN VARCHAR2, HASHIN IN VARCHAR2)
IS
    HASHEDPW VARCHAR2(512);
BEGIN
    SELECT PASSHASH INTO HASHEDPW FROM USERS WHERE USERNAME=UNAME;
    ISMATCH := HASHIN = HASHEDPW;
END;
/

--CREATE TABLE USERS(
--    USERID NUMBER PRIMARY KEY,
--    USERNAME VARCHAR2(64) UNIQUE,
--    USERTYPE NUMBER,
--    FIRSTNAME VARCHAR2(64) NOT NULL,
--    LASTNAME VARCHAR2(64) NOT NULL,
--    PASSHASH VARCHAR2(512) NOT NULL
--);
CREATE OR REPLACE PROCEDURE REGISTER_USER
    (UID OUT NUMBER, UNAME IN VARCHAR2, UTYPE IN NUMBER, FNAME IN VARCHAR2, LNAME IN VARCHAR2, PWHASH IN VARCHAR2)
IS
    ID NUMBER;
BEGIN
    ID := PK_USERS.NEXTVAL;
    INSERT INTO USERS VALUES (ID, UNAME, UTYPE, FNAME, LNAME, PWHASH);
    UID := ID;
END;
/

--CREATE TABLE ACCOUNTS(
--    ACCOUNTID NUMBER PRIMARY KEY,
--    ACTIVE NUMBER,
--    OWNER NUMBER,
--    BALANCE NUMBER(38, 2)
--);
CREATE OR REPLACE PROCEDURE REGISTER_ACCOUNT
    (ACCTID OUT NUMBER, OWNERID IN NUMBER)
IS
    ID NUMBER;
BEGIN
    ID := PK_ACCOUNTS.NEXTVAL;
    INSERT INTO ACCOUNTS VALUES (ID, 1, OWNERID, 0);
    ACCTID := ID;
END;
/

--rollback;
--DROP TABLE ACCOUNTS;
--DROP TABLE USERS;